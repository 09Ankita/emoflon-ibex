#using MoflonToHenshin.*
#using AttrCondDefLibrary.*

#rule CreateTGGNodeToCreateHenshinNodeRule #with MoflonToHenshin

#source { 
	tTgg : TGG{
		 - rules -> tTggRule
	}
	
	 tTggRule : TGGRule{
		++ - nodes -> tTGGNode 
	}
	
	++ tTGGNode : TGGRuleNode{
		//bindingType := enum::BindingType::CREATE
	}
}

#target {
	hModule : Module {
		 - units -> hRule
	}
	
	 hRule : Rule{
		 - rhs -> rhs
	}
	
	
	 rhs : Graph{
	 	++ - nodes -> hCreatedNode
	 }
	 
	++ hCreatedNode : Node 
}

#correspondence {
  tggToModule : MoflonToHenshin.TGGToModule {
  	#src->tTgg
  	#trg->hModule
  }
  
   tggRuleToHenshinRule : MoflonToHenshin.TGGRuleToHenshinRule {
  	#src->tTggRule
  	#trg->hRule
  }
	
	++ tggNodeToHenshinNode : TGGNodeToHenshinNode {
		#src->tTGGNode
		#trg->hCreatedNode
	}
}

#attributeConditions {
	setCreateAttribute(tTGGNode.bindingType)
}
