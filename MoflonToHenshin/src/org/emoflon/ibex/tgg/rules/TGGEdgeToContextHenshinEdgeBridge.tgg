#using MoflonToHenshin.*
#using AttrCondDefLibrary.*

#rule TGGEdgeToContextHenshinEdgeBridge #with MoflonToHenshin

#source {
	tTggRule : TGGRule{
		- nodes -> tSrcTGGNode
		- nodes -> tTrgTGGNode
		++ - edges -> tTGGEdge
	}
	
	tSrcTGGNode:TGGRuleNode{
		++ -outgoingEdges-> tTGGEdge
	}

	tTrgTGGNode:TGGRuleNode{
		++ -incomingEdges-> tTGGEdge
	}

	tTGGEdge:TGGRuleEdge{
		bindingType==enum::BindingType::CONTEXT
	}
}

#target {
	hRule : Rule {
		- lhs -> lhs
		- rhs -> rhs
	}
	
	rhs:Graph{
		- nodes -> hRhsSrcNode
		- nodes -> hRhsTrgNode
		++ - edges -> hRhsEdge
	}

	hRhsSrcNode:Node{
		++ - outgoing -> hRhsEdge
	}

	hRhsTrgNode:Node{
		++ - incoming -> hRhsEdge
	}

	hRhsEdge:Edge

	lhs:Graph{
		- nodes -> hLhsSrcNode
		- nodes -> hLhsTrgNode
		++ - edges -> hLhsEdge
	}

	hLhsSrcNode:Node{
		++ - outgoing -> hLhsEdge
	}

	hLhsTrgNode:Node{
		++ - incoming -> hLhsEdge
	}

	hLhsEdge:Edge
}

#correspondence {
	lhsTggSrcNodeToHenshinNode :TGGNodeToHenshinNode {
		#src->tSrcTGGNode
		#trg->hLhsSrcNode
	}

	lhsTggTrgNodeToHenshinNode :TGGNodeToHenshinNode {
		#src->tTrgTGGNode
		#trg->hLhsTrgNode
	}

	lhsTggEdgeToHenshinEdge :TGGEdgeToHenshinEdge {
		#src->tTGGEdge
		#trg->hLhsEdge
	}

	rhsTggSrcNodeToHenshinNode :TGGNodeToHenshinNode {
		#src->tSrcTGGNode
		#trg->hRhsSrcNode
	}

	rhsTggTrgNodeToHenshinNode :TGGNodeToHenshinNode {
		#src->tTrgTGGNode
		#trg->hRhsTrgNode
	}

	rhsTggEdgeToHenshinEdge :TGGEdgeToHenshinEdge {
		#src->tTGGEdge
		#trg->hRhsEdge
	}
	
	tggRuleToHenshinRule :MoflonToHenshin.TGGRuleToHenshinRule {
		#src->tTggRule
		#trg->hRule
	}
}

#attributeConditions {
	
}


