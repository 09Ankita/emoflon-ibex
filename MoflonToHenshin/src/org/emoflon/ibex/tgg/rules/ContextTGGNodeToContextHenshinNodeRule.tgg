#using MoflonToHenshin.*
#using AttrCondDefLibrary.*

#rule ContextTGGNodeToContextHenshinNodeRule #extends TGGRuleToHenshinRuleContextAbstractRule #with MoflonToHenshin

#source { 
	 tTggRule : TGGRule{
		++ - nodes -> tTGGNode 
	}
	
	++ tTGGNode : TGGRuleNode{
		//bindingType := enum::BindingType::CREATE
	}
}

#target {
	 hRule : Rule{
		 - rhs -> rhs
		 - lhs -> lhs
	}
	
	lhs : Graph{
		++ - nodes -> hLHSNodeNode
	}
	
	++ hLHSNodeNode : Node
	
	 rhs : Graph{
	 	++ - nodes -> hRHSNodeNode
	 }
	 
	++ hRHSNodeNode : Node
	
	mapping : Mapping {
		++ - origin -> hLHSNodeNode
		++ - image -> hRHSNodeNode
	}
}

#correspondence {
	++ tggNodeToLHSHenshinNode : TGGNodeToHenshinNode {
		#src->tTGGNode
		#trg->hLHSNodeNode
	}
	
	++ tggNodeToRHSHenshinNode : TGGNodeToHenshinNode {
		#src->tTGGNode
		#trg->hRHSNodeNode
	}
}

#attributeConditions {
	setContextAttribute(tTGGNode.bindingType)
	eq_string(tTGGNode.name, hLHSNodeNode.name)
	eq_string(tTGGNode.name, hRHSNodeNode.name)
}
